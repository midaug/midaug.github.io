{"meta":{"title":"Midaug's Blog","subtitle":"编程不息,作死不止","description":"编程不息,作死不止","author":"Midaug","url":"http://blog.midaug.win"},"pages":[{"title":"","date":"2018-05-10T09:28:46.889Z","updated":"2018-05-10T09:28:46.889Z","comments":true,"path":"googlee58fc5e1e3da6073.html","permalink":"http://blog.midaug.win/googlee58fc5e1e3da6073.html","excerpt":"","text":"google-site-verification: googlee58fc5e1e3da6073.html"},{"title":"","date":"2018-05-10T09:28:46.885Z","updated":"2018-05-10T09:28:46.885Z","comments":true,"path":"404.html","permalink":"http://blog.midaug.win/404.html","excerpt":"","text":""},{"title":"404 Not Found：该页无法显示","date":"2018-05-10T09:28:46.885Z","updated":"2018-05-10T09:28:46.885Z","comments":false,"path":"/404.html","permalink":"http://blog.midaug.win//404.html","excerpt":"","text":""},{"title":"分类","date":"2017-12-21T06:38:51.000Z","updated":"2018-05-10T09:28:46.889Z","comments":false,"path":"categories/index.html","permalink":"http://blog.midaug.win/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2018-05-10T09:28:46.888Z","updated":"2018-05-10T09:28:46.888Z","comments":false,"path":"about/index.html","permalink":"http://blog.midaug.win/about/index.html","excerpt":"","text":"12345678910111213141516171819&#123; name: \"黄贤军 / Midaug\", birthday: \"1991-08-14\", gender: \"男\", address: \"魔都 / 上海\", education: \"本科 / 湖南涉外经济学院\", major: \"企业财务管理\", Github: \"https://github.com/midaug\", skills: [ \"Java\", \"Spring\", \"J2EE\", \"Python\", \"MVC\" , \"Git\", \"Svn\", \"Maven\", \"JavaScript\", \"Bootstrap\", \"AngularJS\", \"JQuery\", \"HTML\", \"CSS\", \"PhantomJS\", \"MongoDB\", \"MySQL\", \"Oracle\", \"Linux\", \"Nginx\", \"Shell\", \"NodeJS\", \"Tomcat\", \"baidu ocr\", \"alipay open\", \"wechat pay\", \"sms\" ], blog: \"http://blog.midaug.win\", Email: \"days0814@gmail.com\", description: [\"一个自学成才的程序猿\"] &#125;"},{"title":"标签","date":"2017-12-21T06:38:22.000Z","updated":"2018-05-10T09:28:46.896Z","comments":false,"path":"tags/index.html","permalink":"http://blog.midaug.win/tags/index.html","excerpt":"","text":""},{"title":"","date":"2018-05-10T09:28:46.896Z","updated":"2018-05-10T09:28:46.896Z","comments":true,"path":"static/js/particle.js","permalink":"http://blog.midaug.win/static/js/particle.js","excerpt":"","text":"// build time:Thu Jun 14 2018 15:45:45 GMT+0800 (中国标准时间) !function(){function n(n,e,t){return n.getAttribute(e)||t}function e(n){return document.getElementsByTagName(n)}function t(){var t=e(\"script\"),o=t.length,i=t[o-1];return{l:o,z:n(i,\"zIndex\",-1),o:n(i,\"opacity\",.5),c:n(i,\"color\",\"0,0,0\"),n:n(i,\"count\",99)}}function o(){c=u.width=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,a=u.height=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight}function i(){l.clearRect(0,0,c,a);var n,e,t,o,u,d,x=[w].concat(y);y.forEach(function(i){for(i.x+=i.xa,i.y+=i.ya,i.xa*=i.x>c||i.xa||i.y"}],"posts":[{"title":"leetCode习题(简单难度)-int数值翻转","slug":"2018031702","date":"2018-03-17T06:33:33.000Z","updated":"2018-05-10T09:28:46.888Z","comments":true,"path":"2018031702.html","link":"","permalink":"http://blog.midaug.win/2018031702.html","excerpt":"题目内容给定一个范围为32 位 int 的整数，将其颠倒。例 1:输入: 123输出: 321例 2:输入: -123输出: -321例 3:输入: 120输出: 21注意:假设我们的环境只能处理 32 位 int 范围内的整数。根据这个假设，如果颠倒后的结果超过这个范围，则返回 0。","text":"题目内容给定一个范围为32 位 int 的整数，将其颠倒。例 1:输入: 123输出: 321例 2:输入: -123输出: -321例 3:输入: 120输出: 21注意:假设我们的环境只能处理 32 位 int 范围内的整数。根据这个假设，如果颠倒后的结果超过这个范围，则返回 0。 解法1234567891011121314151617181920212223package com.mid.test;public class LeetCode001 &#123; public static void main(String[] args) &#123; System.out.println(reverse(-1230)); &#125; private static int reverse(int x) &#123; long tmp = x; // 防止结果溢出 long result = 0; while (tmp != 0) &#123; // 当tmp&lt;10时，tmp / 10才等于0 result = result * 10 + tmp % 10; tmp = tmp / 10; // System.out.println(result + \" \" + tmp); &#125; if (result &lt; Integer.MIN_VALUE || result &gt; Integer.MAX_VALUE) &#123; result = 0; &#125; return (int) result; &#125;&#125; 思路利用取余的特性，对10取余余数就是最后一位数字，然后将这个余数乘以10加上下一个余数。在while里打印就能很清晰的看到过程12340 -123-3 -12-32 -1-321 0","categories":[{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/categories/leetCode/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.midaug.win/tags/java/"},{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/tags/leetCode/"},{"name":"算法","slug":"算法","permalink":"http://blog.midaug.win/tags/算法/"}],"keywords":[{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/categories/leetCode/"}]},{"title":"leetCode习题(简单难度)-int数组去重","slug":"2018031701","date":"2018-03-17T05:33:33.000Z","updated":"2018-05-10T09:28:46.886Z","comments":true,"path":"2018031701.html","link":"","permalink":"http://blog.midaug.win/2018031701.html","excerpt":"题目内容给定一个有序数组，你需要原地删除其中的重复内容，使每个元素只出现一次,并返回新的长度。不要另外定义一个数组，您必须通过用 O(1) 额外内存原地修改输入的数组来做到这一点。示例：给定数组: nums = [1,1,2],你的函数应该返回新长度 2, 并且原数组nums的前两个元素必须是1和2不需要理会新的数组长度后面的元素","text":"题目内容给定一个有序数组，你需要原地删除其中的重复内容，使每个元素只出现一次,并返回新的长度。不要另外定义一个数组，您必须通过用 O(1) 额外内存原地修改输入的数组来做到这一点。示例：给定数组: nums = [1,1,2],你的函数应该返回新长度 2, 并且原数组nums的前两个元素必须是1和2不需要理会新的数组长度后面的元素 解法12345678910111213141516171819202122232425262728package com.mid.test;import java.util.Arrays;public class LeetCode002 &#123; public static void main(String[] args) &#123; int[] nums = &#123; 1, 1, 1, 2 &#125;; int newLength = removeDuplicates(nums); System.out.println(newLength); System.out.println(Arrays.toString(Arrays.copyOf(nums, newLength))); &#125; public static int removeDuplicates(int[] nums) &#123; int len = nums.length; if (len &lt; 2) &#123; return len; &#125; int end = 0; //新数组长度 for (int i = 1; i &lt; len; i++) &#123; if (nums[i] != nums[end]) &#123; //不同时将不同的值放置在新数组的下一个位置 end++; nums[end] = nums[i]; &#125; &#125; return end + 1; &#125;&#125; 思路我之前的思路有所差异是将相同的往后移新的想法：将不同的往对应顺序上塞","categories":[{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/categories/leetCode/"}],"tags":[{"name":"java","slug":"java","permalink":"http://blog.midaug.win/tags/java/"},{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/tags/leetCode/"},{"name":"算法","slug":"算法","permalink":"http://blog.midaug.win/tags/算法/"}],"keywords":[{"name":"leetCode","slug":"leetCode","permalink":"http://blog.midaug.win/categories/leetCode/"}]},{"title":"java调用phantomjs爬取网页及快照","slug":"20180129","date":"2018-01-29T13:11:33.000Z","updated":"2018-05-10T09:28:46.886Z","comments":true,"path":"20180129.html","link":"","permalink":"http://blog.midaug.win/20180129.html","excerpt":"","text":"前言前阵子遇到一个需求，需要爬取学信网学历的查询结果进行解析并截图留证，利用java完成了爬取的html解析功能后发现截图较为困难。我偶然发现了 phantomjs，可以由服务端去做类似爬虫的操作来爬取html和保存图片，正好满足上述两个需求。 phantomjs官方网站: phantomjs.orgphantomjs 是 一个基于 webkit 内核的无头浏览器，没有 UI 界面。它就是一个浏览器，只是内部的点击、翻页等人为相关操作需要程序设计实现。 提供了 javascript API 接口，可以通过 js 直接与 webkit 内核交互，在此之上可以结合 Java 语言等，通过 Java 调用 js 等相关操作，从而解决了以前 c/c++ 才能比较好的基于 webkit 开发优质采集器的限制。 提供了 windows、linux、mac 等不同 OS 的安装使用包，也就是说可以在不同平台上，二次开发采集项目（爬虫）或是自动项目测试等工作。 常用内置对象123456// 获得系统操作对象，包括命令行参数、phantomjs系统设置等信息var system = require('system');// 获取操作dom或web网页的对象，通过它可以打开网页、接收网页内容、request、response参数，其为最核心对象。var page = require('webpage');// 获取文件系统对象，通过它可以操作操作系统的文件操作，包括read、write、move、copy、delete等。var fs = require('fs'); 常用API1234567891011121314151617181920212223242526// 通过page对象通过url链接打开页面，加载完成后回调page.open(url, function (status) &#123;&#125;// 当page.open调用时，会首先执行该函数，在此可以预置一些参数或函数，用于后边的回调函数中page.onLoadStarted = function() &#123;&#125;// page的所要加载的资源在加载过程中，失败回调处理page.onResourceError = function(resourceError) &#123;&#125;// page的所要加载的资源在发起请求时，可以回调该函数page.onResourceRequested = function(requestData, networkRequest) &#123;&#125;// page的所要加载的资源在加载过程中，每加载一个相关资源，都会在此先做出响应，// 它相当于http头部分，核心回调对象为response，可以获取本次请求的cookies、userAgent等page.onResourceReceived = function(response) &#123;&#125;// 打印一些输出信息到控制台page.onConsoleMessage = function (msg) &#123;&#125;// alert也是无法直接弹出的，但可以回调alert的内容page.onAlert = function(msg) &#123;&#125;// 当page.open时，http请求（不包括所引起的其它的加载资源）出现了异常，// 如404、no route to web site等，都会在此回调显示。page.onError = function(msg, trace) &#123;&#125;// 当page.open打开的url，或者是在打开过程中进行了跳转，可以在这个函数中回调。page.onUrlChanged = function(targetUrl) &#123;&#125;// 当page.open的目标URL被真正打开后，会在调用open的回调函数前调用该函数，在此可以进行内部的翻页等操作page.onLoadFinished = function(status) &#123;&#125;// 在所加载的web page内部执行该函数，像翻页、点击、滑动等，均可在此中执行page.evaluate(function()&#123;&#125;);// 将当前page的现状渲染成图片，输出到指定的文件中去。page.render(\"\"); 调用方式1$ /bin/phantomjs [配置文件(js文件)] [参数1] [参数2] [参数3] ... 实现java使用java.lang.Runtime调用，接收返回结果进行操作 config.js 配置文件内容123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354var page = require('webpage').create();var system = require('system');var ssionid = system.args[1]; var address = system.args[2]; // 请求地址，urlvar output = system.args[3]; // 输出var pageWidth = 1366; //初始化游览器宽var pageHeight = 1080; //初始化游览器高page.viewportSize = &#123; width: pageWidth, height: pageHeight &#125;; //初始化游览器// 添加ssionid至cookiephantom.addCookie(&#123; 'name' : 'JSESSIONID', 'value' : ssionid, 'domain' : 'job.chsi.com.cn', 'path' : '/'&#125;);//打开地址page.open(address, function (status) &#123; // 打开完毕 if (status === \"success\") &#123; // dom操作 var rect = page.evaluate(function () &#123; var html = document.getElementsByTagName('html'); if(html &amp;&amp; html.length &gt; 0)&#123; if(html[0].innerHTML.indexOf('id=\"contMain\"') &lt; 0)&#123; return null; &#125; return &#123; offset : html[0].getBoundingClientRect(), innerHTML : html[0].innerHTML &#125;; &#125; return null; &#125;); if(!rect)&#123; console.log(output); page.close(); phantom.exit(); return; &#125; console.log(rect.innerHTML); // 输出html page.clipRect = &#123; //设置截取区域(此设置为全屏) top:0, left:0, width:rect.offset.width, height:rect.offset.height &#125;; window.setTimeout(function () &#123; page.render(output); // 输出 page.close(); // 关闭 phantom.exit(); // 退出 &#125;, 200); &#125;&#125;); 配置文件总结 output为输出方式， 为输出的绝对路径(例如:’c:/123.jpg’)， 以后缀决定文件格式. 建议使用pdf格式， pdf格式目前测试来看没有出现问题， 图片则出现过背景颜色丢失的情况 console.log(page.renderBase64(‘JPEG’)) 以Base64的格式输出至控制台 这里是因为同时进行html爬取和截图快照， 所以不使用Base64的方式， 且输出的字符串有长度限制， 建议不要大量console.log()， 否则后面的内容可能会缺失 page.evaluate内可进行dom操作， 这里只取了html， 同理可有规则的针对爬取想要的页面信息 addCookie会返回一个boolean值， 有见到别人的文章判断了这个值才进行后续操作， 但我测试来看是有bug的， 即使成功也返回了false 可以利用dom操作获取元素的位置及宽高对clipRect进行设置， 可达对想要的区域截图的目的， 例如截取某个div中的内容 java封装123456789101112131415161718192021222324252627282930public String phantomjs(String confPath, String url, String ssionId, String outPath) &#123; StringBuilder sb = new StringBuilder(); InputStream is = null; InputStreamReader isr = null; BufferedReader br = null; try &#123; String cmd = \"phantomjs \" + confPath + \" \" + ssionId + \" \" + url + \" \" + outPath; Process ps = Runtime.getRuntime().exec(cmd); is = ps.getInputStream(); isr = new InputStreamReader(is, \"utf-8\"); // 注意编码格式 br = new BufferedReader(isr); String tmp; while ((tmp = br.readLine()) != null) &#123; sb.append(tmp); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; IOUtils.closeQuietly(br); // 注意关闭流 IOUtils.closeQuietly(isr); IOUtils.closeQuietly(is); &#125; String html = sb.toString(); if (html.contains(filePath)) &#123; return null; &#125; return html;&#125; java封装总结 我这里直接使用phantomjs是因为设置了环境变量， 否则请使用文件的绝对路径 编码格式尤为重要， 否则将出现html乱码问题 总结phantomjs的功能非常强大，使用起来也是非常简单的。本文中只是一些简单的使用，更多的请自行查看官方API。 致谢这是我第一篇hexo文章，在Bingo phantomjs的文章中得到了大量素材与灵感，以此致谢。","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://blog.midaug.win/categories/爬虫/"}],"tags":[{"name":"phantomjs","slug":"phantomjs","permalink":"http://blog.midaug.win/tags/phantomjs/"},{"name":"爬虫","slug":"爬虫","permalink":"http://blog.midaug.win/tags/爬虫/"},{"name":"网页快照","slug":"网页快照","permalink":"http://blog.midaug.win/tags/网页快照/"},{"name":"javascript","slug":"javascript","permalink":"http://blog.midaug.win/tags/javascript/"},{"name":"java","slug":"java","permalink":"http://blog.midaug.win/tags/java/"}],"keywords":[{"name":"爬虫","slug":"爬虫","permalink":"http://blog.midaug.win/categories/爬虫/"}]},{"title":"Cmd Markdown 复制过来的语法测试","slug":"20171220","date":"2017-12-20T09:11:34.000Z","updated":"2018-05-10T10:48:29.865Z","comments":true,"path":"20171220.html","link":"","permalink":"http://blog.midaug.win/20171220.html","excerpt":"欢迎使用 Cmd Markdown 编辑阅读器我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ $$\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$$","text":"欢迎使用 Cmd Markdown 编辑阅读器我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，Cmd Markdown 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown： 整理知识，学习笔记 发布日记，杂文，所见所想 撰写发布技术文稿（代码支持） 撰写发布学术论文（LaTeX 公式支持） $$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$ $$\\sum_{i=0}^N\\int_{a}^{b}g(t,i)\\text{d}t$$ 除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载： Windows/Mac/Linux 全平台客户端 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 新文稿 或者使用快捷键 Ctrl+Alt+N。 什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字，更棒的是，它还可以 1. 制作一份待办事宜 Todo 列表 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考 七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票 2. 书写一个质能守恒公式$$E=mc^2$$ 3. 高亮一段代码1234567@requires_authorizationclass SomeClass: passif __name__ == '__main__': # A comment print 'hello world' 4. 高效绘制 流程图流程图使用插件:hexo-filter-flowchart 5. 高效绘制 序列图序列图使用插件:hexo-filter-sequence 6. 高效绘制 甘特图不支持甘特图 12345678910111213title 项目开发流程section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5dsection 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5dsection 发布验收 发布: 2d 验收: 3d 7. 绘制表格 项目 价格 数量 计算机 \\$1600 5 手机 \\$12 12 管线 \\$1 234 8. 更详细语法说明想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。 总而言之，不同于其它 所见即所得 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。 什么是 Cmd Markdown您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 编辑/发布/阅读 Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。 1. 实时同步预览我们将 Cmd Markdown 的主界面一分为二，左边为编辑区，右边为预览区，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！ 2. 编辑工具栏也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 编辑区 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。 3. 编辑模式完全心无旁骛的方式编辑文字：点击 编辑工具栏 最右侧的拉伸按钮或者按下 Ctrl + M，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！ 4. 实时的云端文稿为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 编辑工具栏 的最右侧提示 已保存 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。 5. 离线模式在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。 6. 管理工具栏为了便于管理您的文稿，在 预览区 的顶部放置了如下所示的 管理工具栏： 通过管理工具栏可以： 发布：将当前的文稿生成固定链接，在网络上发布，分享 新建：开始撰写一篇新的文稿 删除：删除当前的文稿 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地 列表：所有新增和过往的文稿都可以在这里查看、操作 模式：切换 普通/Vim/Emacs 编辑模式 7. 阅读工具栏 通过 预览区 右上角的 阅读工具栏，可以查看当前文稿的目录并增强阅读体验。 工具栏上的五个图标依次为： 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落 视图：互换左边编辑区和右边预览区的位置 主题：内置了黑白两种模式的主题，试试 黑色主题，超炫！ 阅读：心无旁骛的阅读模式提供超一流的阅读体验 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境 8. 阅读模式在 阅读工具栏 点击 或者按下 Ctrl+Alt+M 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。 9. 标签、分类和搜索在编辑区任意行首位置输入以下格式的文字可以标签当前文档： 标签： 未分类 标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示： 10. 文稿发布和分享在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 (Ctrl+Alt+P) 发布这份文档给好友吧！ 再一次感谢您花费时间阅读这份欢迎稿，点击 (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！ st=>start: Start op=>operation: Your Operation cond=>condition: Yes or No? e=>end st->op->cond cond(yes)->e cond(no)->op{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"flowchart-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"flowchart-0-options\").value)); var diagram = flowchart.parse(code); diagram.drawSVG(\"flowchart-0\", options);Alice->Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob-->Alice: I am good thanks!{\"theme\":\"simple\",\"scale\":1,\"line-width\":2,\"line-length\":50,\"text-margin\":10,\"font-size\":12} var code = document.getElementById(\"sequence-0-code\").value; var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value)); var diagram = Diagram.parse(code); diagram.drawSVG(\"sequence-0\", options);","categories":[{"name":"测试","slug":"测试","permalink":"http://blog.midaug.win/categories/测试/"}],"tags":[{"name":"test","slug":"test","permalink":"http://blog.midaug.win/tags/test/"}],"keywords":[{"name":"测试","slug":"测试","permalink":"http://blog.midaug.win/categories/测试/"}]}]}