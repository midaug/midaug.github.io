<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Nginx on MidAug's Blog</title><link>/tags/nginx/</link><description>Recent content in Nginx on MidAug's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>days0814@gmail.com (MidAug)</managingEditor><webMaster>days0814@gmail.com (MidAug)</webMaster><lastBuildDate>Tue, 21 Dec 2021 18:11:33 +0000</lastBuildDate><sy:updatePeriod>hourly</sy:updatePeriod><atom:link href="/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx 内容缓存及常见参数配置</title><link>/posts/2021122101/</link><pubDate>Tue, 21 Dec 2021 18:11:33 +0000</pubDate><author>days0814@gmail.com (MidAug)</author><atom:modified>Tue, 21 Dec 2021 18:11:33 +0000</atom:modified><guid>/posts/2021122101/</guid><description>场景 使用场景:项目的页面需要加载很多数据，也不是经常变化的，不涉及个性化定制，为每次请求去动态生成数据，性能比不上根据请求路由和参数缓存一下结果，使用 Nginx 缓存将大幅度提升请求速度。
基础 只需要配置 proxy_cache_path 和 proxy_cache 就可以开启内容缓存，前者用来设置缓存的路径和配置，后者用来启用缓存。
http {
...
proxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;
server {
proxy_cache mycache;
location / {
proxy_pass http://localhost:8000;
}
}
} 对应参数说明:
1.用于缓存的本地磁盘目录是 /path/to/cache/
2.levels 在 /path/to/cache/ 设置了一个两级层次结构的目录。将大量的文件放置在单个目录中会导致文件访问缓慢，所以针对大多数部署，我们推荐使用两级目录层次结构。如果 levels 参数没有配置，则 NGINX 会将所有的文件放到同一个目录中。
3.keys_zone 设置一个共享内存区，该内存区用于存储缓存键和元数据，有些类似计时器的用途。将键的拷贝放入内存可以使 NGINX 在不检索磁盘的情况下快速决定一个请求是 HIT 还是 MISS，这样大大提高了检索速度。一个 1MB 的内存空间可以存储大约 8000 个 key，那么上面配置的 10MB 内存空间可以存储差不多 80000 个key。
4.max_size 设置了缓存的上限（在上面的例子中是 10G）。这是一个可选项；如果不指定具体值，那就是允许缓存不断增长，占用所有可用的磁盘空间。当缓存达到这个上线，处理器便调用 cache manager 来移除最近最少被使用的文件，这样把缓存的空间降低至这个限制之下。</description><dc:creator>MidAug</dc:creator><category>nginx</category><category>nginx</category></item><item><title>Nginx作为文件下载服务器</title><link>/posts/20190615/</link><pubDate>Sat, 15 Jun 2019 00:00:00 +0000</pubDate><author>days0814@gmail.com (MidAug)</author><atom:modified>Sat, 15 Jun 2019 00:00:00 +0000</atom:modified><guid>/posts/20190615/</guid><description>Nginx conf 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 server { listen 80; server_name 10.43.0.0; #charset koi8-r; #access_log /var/log/nginx/log/host.access.log main; location / { root /usr/share/nginx/html; index index.html index.htm; } #error_page 404 /404.html; # redirect server error pages to the static page /50x.</description><dc:creator>MidAug</dc:creator><category>Nginx</category><category>文件下载服务</category><category>Nginx</category></item></channel></rss>