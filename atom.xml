<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Midaug&#39;s Blog</title>
  
  <subtitle>编程不息,作死不止</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.midaug.win/"/>
  <updated>2018-05-10T09:28:46.888Z</updated>
  <id>http://blog.midaug.win/</id>
  
  <author>
    <name>Midaug</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetCode习题(简单难度)-int数值翻转</title>
    <link href="http://blog.midaug.win/2018031702.html"/>
    <id>http://blog.midaug.win/2018031702.html</id>
    <published>2018-03-17T06:33:33.000Z</published>
    <updated>2018-05-10T09:28:46.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><p>给定一个范围为<span style="border-bottom:2px dashed #fc6423;">32</span> 位 int 的整数，将其颠倒。<br>例 1:<br>输入: 123<br>输出: 321<br>例 2:<br>输入: -123<br>输出: -321<br>例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能处理 32 位 int 范围内的整数。根据这个假设，如果<span style="border-bottom:2px dashed #fc6423;">颠倒后的结果超过这个范围，则返回 0</span>。</p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mid.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeetCode001</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(reverse(-<span class="number">1230</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> tmp = x; <span class="comment">// 防止结果溢出</span></span><br><span class="line"><span class="keyword">long</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (tmp != <span class="number">0</span>) &#123; <span class="comment">// 当tmp&lt;10时，tmp / 10才等于0</span></span><br><span class="line">result = result * <span class="number">10</span> + tmp % <span class="number">10</span>;</span><br><span class="line">tmp = tmp / <span class="number">10</span>;</span><br><span class="line"><span class="comment">// System.out.println(result + "     " + tmp);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (result &lt; Integer.MIN_VALUE || result &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line">result = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">int</span>) result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>利用取余的特性，对10取余余数就是最后一位数字，然后将这个余数乘以10加上下一个余数。<br>在while里打印就能很清晰的看到过程<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>     -<span class="number">123</span></span><br><span class="line">-<span class="number">3</span>     -<span class="number">12</span></span><br><span class="line">-<span class="number">32</span>     -<span class="number">1</span></span><br><span class="line">-<span class="number">321</span>     <span class="number">0</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目内容&quot;&gt;&lt;a href=&quot;#题目内容&quot; class=&quot;headerlink&quot; title=&quot;题目内容&quot;&gt;&lt;/a&gt;题目内容&lt;/h1&gt;&lt;p&gt;给定一个范围为&lt;span style=&quot;border-bottom:2px dashed #fc6423;&quot;&gt;32&lt;/span&gt; 位 int 的整数，将其颠倒。&lt;br&gt;例 1:&lt;br&gt;输入: 123&lt;br&gt;输出: 321&lt;br&gt;例 2:&lt;br&gt;输入: -123&lt;br&gt;输出: -321&lt;br&gt;例 3:&lt;br&gt;输入: 120&lt;br&gt;输出: 21&lt;br&gt;注意:&lt;br&gt;假设我们的环境只能处理 32 位 int 范围内的整数。根据这个假设，如果&lt;span style=&quot;border-bottom:2px dashed #fc6423;&quot;&gt;颠倒后的结果超过这个范围，则返回 0&lt;/span&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="leetCode" scheme="http://blog.midaug.win/categories/leetCode/"/>
    
    
      <category term="leetCode" scheme="http://blog.midaug.win/tags/leetCode/"/>
    
      <category term="算法" scheme="http://blog.midaug.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://blog.midaug.win/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>leetCode习题(简单难度)-int数组去重</title>
    <link href="http://blog.midaug.win/2018031701.html"/>
    <id>http://blog.midaug.win/2018031701.html</id>
    <published>2018-03-17T05:33:33.000Z</published>
    <updated>2018-05-10T09:28:46.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h1><p>给定一个<span style="border-bottom:2px dashed #fc6423;">有序数组</span>，你需要原地删除其中的重复内容，使每个元素只出现一次,并返回新的长度。<br><span style="border-bottom:2px dashed #fc6423;">不要另外定义一个数组</span>，您必须通过用 O(1) 额外内存<span style="border-bottom:2px dashed #fc6423;">原地修改</span>输入的数组来做到这一点。<br>示例：<br>给定数组: nums = [1,1,2],<br>你的函数应该返回新长度 2, 并且原数组nums的前两个元素必须是1和2<br>不需要理会新的数组长度后面的元素</p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mid.test;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeetCode002</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] nums = &#123; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> newLength = removeDuplicates(nums);</span><br><span class="line">System.out.println(newLength);</span><br><span class="line">System.out.println(Arrays.toString(Arrays.copyOf(nums, newLength)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = nums.length;</span><br><span class="line"><span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> end = <span class="number">0</span>; <span class="comment">//新数组长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] != nums[end]) &#123; <span class="comment">//不同时将不同的值放置在新数组的下一个位置</span></span><br><span class="line">end++;</span><br><span class="line">nums[end] = nums[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> end + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我之前的思路有所差异是将相同的往后移<br>新的想法：将不同的往对应顺序上塞</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目内容&quot;&gt;&lt;a href=&quot;#题目内容&quot; class=&quot;headerlink&quot; title=&quot;题目内容&quot;&gt;&lt;/a&gt;题目内容&lt;/h1&gt;&lt;p&gt;给定一个&lt;span style=&quot;border-bottom:2px dashed #fc6423;&quot;&gt;有序数组&lt;/span&gt;，你需要原地删除其中的重复内容，使每个元素只出现一次,并返回新的长度。&lt;br&gt;&lt;span style=&quot;border-bottom:2px dashed #fc6423;&quot;&gt;不要另外定义一个数组&lt;/span&gt;，您必须通过用 O(1) 额外内存&lt;span style=&quot;border-bottom:2px dashed #fc6423;&quot;&gt;原地修改&lt;/span&gt;输入的数组来做到这一点。&lt;br&gt;示例：&lt;br&gt;给定数组: nums = [1,1,2],&lt;br&gt;你的函数应该返回新长度 2, 并且原数组nums的前两个元素必须是1和2&lt;br&gt;不需要理会新的数组长度后面的元素&lt;/p&gt;
    
    </summary>
    
      <category term="leetCode" scheme="http://blog.midaug.win/categories/leetCode/"/>
    
    
      <category term="leetCode" scheme="http://blog.midaug.win/tags/leetCode/"/>
    
      <category term="算法" scheme="http://blog.midaug.win/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="java" scheme="http://blog.midaug.win/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java调用phantomjs爬取网页及快照</title>
    <link href="http://blog.midaug.win/20180129.html"/>
    <id>http://blog.midaug.win/20180129.html</id>
    <published>2018-01-29T13:11:33.000Z</published>
    <updated>2018-05-10T09:28:46.886Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/static/images/phantomjs.png" alt="phantomjs-png"><br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前阵子遇到一个需求，需要爬取学信网学历的查询结果进行解析并截图留证，利用java完成了爬取的html解析功能后发现截图较为困难。我偶然发现了 phantomjs，可以由服务端去做类似爬虫的操作来爬取html和保存图片，正好满足上述两个需求。</p><h1 id="phantomjs"><a href="#phantomjs" class="headerlink" title="phantomjs"></a>phantomjs</h1><p><a href="http://phantomjs.org" target="_blank" rel="noopener">官方网站: phantomjs.org</a><br>phantomjs 是 一个基于 webkit 内核的无头浏览器，没有 UI 界面。它就是一个浏览器，只是内部的点击、翻页等人为相关操作需要程序设计实现。</p><p>提供了 javascript API 接口，可以通过 js 直接与 webkit 内核交互，在此之上可以结合 Java 语言等，通过 Java 调用 js 等相关操作，从而解决了以前 c/c++ 才能比较好的基于 webkit 开发优质采集器的限制。</p><p>提供了 windows、linux、mac 等不同 OS 的安装使用包，也就是说可以在不同平台上，二次开发采集项目（爬虫）或是自动项目测试等工作。</p><h2 id="常用内置对象"><a href="#常用内置对象" class="headerlink" title="常用内置对象"></a>常用内置对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获得系统操作对象，包括命令行参数、phantomjs系统设置等信息</span></span><br><span class="line"><span class="keyword">var</span> system = <span class="built_in">require</span>(<span class="string">'system'</span>);</span><br><span class="line"><span class="comment">// 获取操作dom或web网页的对象，通过它可以打开网页、接收网页内容、request、response参数，其为最核心对象。</span></span><br><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>);</span><br><span class="line"><span class="comment">// 获取文件系统对象，通过它可以操作操作系统的文件操作，包括read、write、move、copy、delete等。</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br></pre></td></tr></table></figure><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过page对象通过url链接打开页面，加载完成后回调</span></span><br><span class="line">page.open(url, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当page.open调用时，会首先执行该函数，在此可以预置一些参数或函数，用于后边的回调函数中</span></span><br><span class="line">page.onLoadStarted = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// page的所要加载的资源在加载过程中，失败回调处理</span></span><br><span class="line">page.onResourceError = <span class="function"><span class="keyword">function</span>(<span class="params">resourceError</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// page的所要加载的资源在发起请求时，可以回调该函数</span></span><br><span class="line">page.onResourceRequested = <span class="function"><span class="keyword">function</span>(<span class="params">requestData, networkRequest</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// page的所要加载的资源在加载过程中，每加载一个相关资源，都会在此先做出响应，</span></span><br><span class="line"><span class="comment">// 它相当于http头部分，核心回调对象为response，可以获取本次请求的cookies、userAgent等</span></span><br><span class="line">page.onResourceReceived = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 打印一些输出信息到控制台</span></span><br><span class="line">page.onConsoleMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// alert也是无法直接弹出的，但可以回调alert的内容</span></span><br><span class="line">page.onAlert = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当page.open时，http请求（不包括所引起的其它的加载资源）出现了异常，</span></span><br><span class="line"><span class="comment">// 如404、no route to web site等，都会在此回调显示。</span></span><br><span class="line">page.onError = <span class="function"><span class="keyword">function</span>(<span class="params">msg, trace</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当page.open打开的url，或者是在打开过程中进行了跳转，可以在这个函数中回调。</span></span><br><span class="line">page.onUrlChanged = <span class="function"><span class="keyword">function</span>(<span class="params">targetUrl</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 当page.open的目标URL被真正打开后，会在调用open的回调函数前调用该函数，在此可以进行内部的翻页等操作</span></span><br><span class="line">page.onLoadFinished = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 在所加载的web page内部执行该函数，像翻页、点击、滑动等，均可在此中执行</span></span><br><span class="line">page.evaluate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</span><br><span class="line"><span class="comment">// 将当前page的现状渲染成图片，输出到指定的文件中去。</span></span><br><span class="line">page.render(<span class="string">""</span>);</span><br></pre></td></tr></table></figure><h2 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> /bin/phantomjs [配置文件(js文件)] [参数1] [参数2] [参数3] ...</span><br></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>java使用java.lang.Runtime调用，接收返回结果进行操作</p><h2 id="config-js-配置文件内容"><a href="#config-js-配置文件内容" class="headerlink" title="config.js 配置文件内容"></a>config.js 配置文件内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page = <span class="built_in">require</span>(<span class="string">'webpage'</span>).create();</span><br><span class="line"><span class="keyword">var</span> system = <span class="built_in">require</span>(<span class="string">'system'</span>);</span><br><span class="line"><span class="keyword">var</span> ssionid = system.args[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">var</span> address = system.args[<span class="number">2</span>]; <span class="comment">// 请求地址，url</span></span><br><span class="line"><span class="keyword">var</span> output = system.args[<span class="number">3</span>]; <span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">var</span> pageWidth = <span class="number">1366</span>; <span class="comment">//初始化游览器宽</span></span><br><span class="line"><span class="keyword">var</span> pageHeight = <span class="number">1080</span>; <span class="comment">//初始化游览器高</span></span><br><span class="line">page.viewportSize = &#123; <span class="attr">width</span>: pageWidth, <span class="attr">height</span>: pageHeight &#125;; <span class="comment">//初始化游览器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加ssionid至cookie</span></span><br><span class="line">phantom.addCookie(&#123;</span><br><span class="line">  <span class="string">'name'</span>     : <span class="string">'JSESSIONID'</span>,  </span><br><span class="line">  <span class="string">'value'</span>    : ssionid,  </span><br><span class="line">  <span class="string">'domain'</span>   : <span class="string">'job.chsi.com.cn'</span>,</span><br><span class="line">  <span class="string">'path'</span>     : <span class="string">'/'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//打开地址</span></span><br><span class="line">page.open(address, <span class="function"><span class="keyword">function</span> (<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 打开完毕</span></span><br><span class="line">    <span class="keyword">if</span> (status === <span class="string">"success"</span>) &#123;</span><br><span class="line">      <span class="comment">// dom操作</span></span><br><span class="line">        <span class="keyword">var</span> rect = page.evaluate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> html = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'html'</span>);</span><br><span class="line">            <span class="keyword">if</span>(html &amp;&amp; html.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(html[<span class="number">0</span>].innerHTML.indexOf(<span class="string">'id="contMain"'</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    offset : html[<span class="number">0</span>].getBoundingClientRect(),</span><br><span class="line">                    innerHTML :  html[<span class="number">0</span>].innerHTML   </span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">if</span>(!rect)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(output);</span><br><span class="line">            page.close();</span><br><span class="line">            phantom.exit();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(rect.innerHTML); <span class="comment">// 输出html</span></span><br><span class="line">        page.clipRect = &#123; <span class="comment">//设置截取区域(此设置为全屏)</span></span><br><span class="line">          top:<span class="number">0</span>,</span><br><span class="line">          left:<span class="number">0</span>,</span><br><span class="line">          width:rect.offset.width,</span><br><span class="line">          height:rect.offset.height</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          page.render(output); <span class="comment">// 输出</span></span><br><span class="line">          page.close(); <span class="comment">// 关闭</span></span><br><span class="line">          phantom.exit(); <span class="comment">// 退出</span></span><br><span class="line">        &#125;, <span class="number">200</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="配置文件总结"><a href="#配置文件总结" class="headerlink" title="配置文件总结"></a>配置文件总结</h3><ul><li>output为输出方式， 为输出的绝对路径(例如:’c:/123.jpg’)， 以后缀决定文件格式. 建议使用pdf格式， pdf格式目前测试来看没有出现问题， 图片则出现过背景颜色丢失的情况</li><li>console.log(page.renderBase64(‘JPEG’)) 以Base64的格式输出至控制台</li><li>这里是因为同时进行html爬取和截图快照， 所以不使用Base64的方式， 且输出的字符串有长度限制， 建议不要大量console.log()， 否则后面的内容可能会缺失</li><li>page.evaluate内可进行dom操作， 这里只取了html， 同理可有规则的针对爬取想要的页面信息</li><li>addCookie会返回一个boolean值， 有见到别人的文章判断了这个值才进行后续操作，  但我测试来看是有bug的， 即使成功也返回了false</li><li>可以利用dom操作获取元素的位置及宽高对clipRect进行设置， 可达对想要的区域截图的目的， 例如截取某个div中的内容</li></ul><h2 id="java封装"><a href="#java封装" class="headerlink" title="java封装"></a>java封装</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">phantomjs</span><span class="params">(String confPath, String url, String ssionId, String outPath)</span> </span>&#123;</span><br><span class="line">  StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  InputStream is = <span class="keyword">null</span>;</span><br><span class="line">  InputStreamReader isr = <span class="keyword">null</span>;</span><br><span class="line">  BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String cmd = <span class="string">"phantomjs "</span> + confPath + <span class="string">" "</span> + ssionId + <span class="string">" "</span> + url + <span class="string">" "</span> + outPath;</span><br><span class="line">    Process ps = Runtime.getRuntime().exec(cmd);</span><br><span class="line">    is = ps.getInputStream();</span><br><span class="line">    isr = <span class="keyword">new</span> InputStreamReader(is, <span class="string">"utf-8"</span>); <span class="comment">// 注意编码格式</span></span><br><span class="line">    br = <span class="keyword">new</span> BufferedReader(isr);</span><br><span class="line">    String tmp;</span><br><span class="line">    <span class="keyword">while</span> ((tmp = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">      sb.append(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    IOUtils.closeQuietly(br); <span class="comment">// 注意关闭流</span></span><br><span class="line">    IOUtils.closeQuietly(isr);</span><br><span class="line">    IOUtils.closeQuietly(is);</span><br><span class="line">  &#125;</span><br><span class="line">  String html = sb.toString();</span><br><span class="line">  <span class="keyword">if</span> (html.contains(filePath)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="java封装总结"><a href="#java封装总结" class="headerlink" title="java封装总结"></a>java封装总结</h3><ul><li>我这里直接使用phantomjs是因为设置了环境变量， 否则请使用文件的绝对路径</li><li>编码格式尤为重要， 否则将出现html乱码问题</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>phantomjs的功能非常强大，使用起来也是非常简单的。本文中只是一些简单的使用，更多的请自行查看<a href="http://phantomjs.org/api/webpage/" target="_blank" rel="noopener">官方API</a>。</p><h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>这是我第一篇hexo文章，在<a href="https://bingozb.github.io/51.html" target="_blank" rel="noopener">Bingo phantomjs</a>的文章中得到了大量素材与灵感，以此致谢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/static/images/phantomjs.png&quot; alt=&quot;phantomjs-png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="爬虫" scheme="http://blog.midaug.win/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="java" scheme="http://blog.midaug.win/tags/java/"/>
    
      <category term="phantomjs" scheme="http://blog.midaug.win/tags/phantomjs/"/>
    
      <category term="爬虫" scheme="http://blog.midaug.win/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="网页快照" scheme="http://blog.midaug.win/tags/%E7%BD%91%E9%A1%B5%E5%BF%AB%E7%85%A7/"/>
    
      <category term="javascript" scheme="http://blog.midaug.win/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Cmd Markdown 复制过来的语法测试</title>
    <link href="http://blog.midaug.win/20171220.html"/>
    <id>http://blog.midaug.win/20171220.html</id>
    <published>2017-12-20T09:11:34.000Z</published>
    <updated>2018-06-25T05:12:05.661Z</updated>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用-Cmd-Markdown-编辑阅读器"><a href="#欢迎使用-Cmd-Markdown-编辑阅读器" class="headerlink" title="欢迎使用 Cmd Markdown 编辑阅读器"></a>欢迎使用 Cmd Markdown 编辑阅读器</h1><p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p><blockquote><ul><li>整理知识，学习笔记</li><li>发布日记，杂文，所见所想</li><li>撰写发布技术文稿（代码支持）</li><li>撰写发布学术论文（LaTeX 公式支持）</li></ul></blockquote><p>  $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$<br>  $$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$</p><p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p><a id="more"></a><p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p><h3 id="Windows-Mac-Linux-全平台客户端"><a href="#Windows-Mac-Linux-全平台客户端" class="headerlink" title="Windows/Mac/Linux 全平台客户端"></a><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="noopener">Windows/Mac/Linux 全平台客户端</a></h3><blockquote><p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p></blockquote><hr><h3 id="什么是-Markdown"><a href="#什么是-Markdown" class="headerlink" title="什么是 Markdown"></a>什么是 Markdown</h3><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p><h3 id="1-制作一份待办事宜-Todo-列表"><a href="#1-制作一份待办事宜-Todo-列表" class="headerlink" title="1. 制作一份待办事宜 Todo 列表"></a>1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="noopener">Todo 列表</a></h3><ul><li style="list-style: none"><input type="checkbox"> 支持以 PDF 格式导出文稿</li><li style="list-style: none"><input type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li style="list-style: none"><input type="checkbox" checked> 新增 Todo 列表功能</li><li style="list-style: none"><input type="checkbox" checked> 修复 LaTex 公式渲染问题</li><li style="list-style: none"><input type="checkbox" checked> 新增 LaTex 公式编号功能</li></ul><ul><li style="list-style: none"><input type="checkbox"> <strong>Cmd Markdown 开发</strong><ul><li style="list-style: none"><input type="checkbox"> 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li><li style="list-style: none"><input type="checkbox"> 支持以 PDF 格式导出文稿</li><li style="list-style: none"><input type="checkbox" checked> 新增Todo列表功能 <a href="https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments" target="_blank" rel="noopener">语法参考</a></li><li style="list-style: none"><input type="checkbox" checked> 改进 LaTex 功能<ul><li style="list-style: none"><input type="checkbox" checked> 修复 LaTex 公式渲染问题</li><li style="list-style: none"><input type="checkbox" checked> 新增 LaTex 公式编号功能 <a href="http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers" target="_blank" rel="noopener">语法参考</a></li></ul></li></ul></li><li style="list-style: none"><input type="checkbox"> <strong>七月旅行准备</strong><ul><li style="list-style: none"><input type="checkbox"> 准备邮轮上需要携带的物品</li><li style="list-style: none"><input type="checkbox"> 浏览日本免税店的物品</li><li style="list-style: none"><input type="checkbox" checked> 购买蓝宝石公主号七月一日的船票</li></ul></li></ul><h3 id="2-书写一个质能守恒公式"><a href="#2-书写一个质能守恒公式" class="headerlink" title="2. 书写一个质能守恒公式"></a>2. 书写一个质能守恒公式</h3><p>$$E=mc^2$$</p><h3 id="3-高亮一段代码"><a href="#3-高亮一段代码" class="headerlink" title="3. 高亮一段代码"></a>3. 高亮一段代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure><h3 id="4-高效绘制-流程图"><a href="#4-高效绘制-流程图" class="headerlink" title="4. 高效绘制 流程图"></a>4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="noopener">流程图</a></h3><p>流程图使用插件:<a href="https://github.com/bubkoo/hexo-filter-flowchart" target="_blank" rel="noopener">hexo-filter-flowchart</a></p><div id="flowchart-0" class="flow-chart"></div><h3 id="5-高效绘制-序列图"><a href="#5-高效绘制-序列图" class="headerlink" title="5. 高效绘制 序列图"></a>5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="noopener">序列图</a></h3><p>序列图使用插件:<a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">hexo-filter-sequence</a></p><div id="sequence-0"></div><h3 id="6-高效绘制-甘特图"><a href="#6-高效绘制-甘特图" class="headerlink" title="6. 高效绘制 甘特图"></a>6. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图" target="_blank" rel="noopener">甘特图</a></h3><p>不支持甘特图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">title 项目开发流程</span><br><span class="line">section 项目确定</span><br><span class="line">    需求分析       :a1, 2016-06-22, 3d</span><br><span class="line">    可行性报告     :after a1, 5d</span><br><span class="line">    概念验证       : 5d</span><br><span class="line">section 项目实施</span><br><span class="line">    概要设计      :2016-07-05  , 5d</span><br><span class="line">    详细设计      :2016-07-08, 10d</span><br><span class="line">    编码          :2016-07-15, 10d</span><br><span class="line">    测试          :2016-07-22, 5d</span><br><span class="line">section 发布验收</span><br><span class="line">    发布: 2d</span><br><span class="line">    验收: 3d</span><br></pre></td></tr></table></figure><h3 id="7-绘制表格"><a href="#7-绘制表格" class="headerlink" title="7. 绘制表格"></a>7. 绘制表格</h3><table><thead><tr><th>项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td>计算机</td><td style="text-align:right">\$1600</td><td style="text-align:center">5</td></tr><tr><td>手机</td><td style="text-align:right">\$12</td><td style="text-align:center">12</td></tr><tr><td>管线</td><td style="text-align:right">\$1</td><td style="text-align:center">234</td></tr></tbody></table><h3 id="8-更详细语法说明"><a href="#8-更详细语法说明" class="headerlink" title="8. 更详细语法说明"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。</p><p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p><hr><h2 id="什么是-Cmd-Markdown"><a href="#什么是-Cmd-Markdown" class="headerlink" title="什么是 Cmd Markdown"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p><h3 id="1-实时同步预览"><a href="#1-实时同步预览" class="headerlink" title="1. 实时同步预览"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p><h3 id="2-编辑工具栏"><a href="#2-编辑工具栏" class="headerlink" title="2. 编辑工具栏"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p><p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p><h3 id="3-编辑模式"><a href="#3-编辑模式" class="headerlink" title="3. 编辑模式"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p><h3 id="4-实时的云端文稿"><a href="#4-实时的云端文稿" class="headerlink" title="4. 实时的云端文稿"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p><h3 id="5-离线模式"><a href="#5-离线模式" class="headerlink" title="5. 离线模式"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p><h3 id="6-管理工具栏"><a href="#6-管理工具栏" class="headerlink" title="6. 管理工具栏"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p><p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p><p>通过管理工具栏可以：</p><p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p><h3 id="7-阅读工具栏"><a href="#7-阅读工具栏" class="headerlink" title="7. 阅读工具栏"></a>7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p><p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p><p>工具栏上的五个图标依次为：</p><p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p><h3 id="8-阅读模式"><a href="#8-阅读模式" class="headerlink" title="8. 阅读模式"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p><h3 id="9-标签、分类和搜索"><a href="#9-标签、分类和搜索" class="headerlink" title="9. 标签、分类和搜索"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p><p>标签： 未分类</p><p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p><p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p><h3 id="10-文稿发布和分享"><a href="#10-文稿发布和分享" class="headerlink" title="10. 文稿发布和分享"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p><hr><p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p><p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: Startop=>operation: Your Operationcond=>condition: Yes or No?e=>endst->op->condcond(yes)->econd(no)->op</textarea><textarea id="flowchart-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Alice->Bob: Hello Bob, how are you?Note right of Bob: Bob thinksBob-->Alice: I am good thanks!</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple","scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;欢迎使用-Cmd-Markdown-编辑阅读器&quot;&gt;&lt;a href=&quot;#欢迎使用-Cmd-Markdown-编辑阅读器&quot; class=&quot;headerlink&quot; title=&quot;欢迎使用 Cmd Markdown 编辑阅读器&quot;&gt;&lt;/a&gt;欢迎使用 Cmd Markdown 编辑阅读器&lt;/h1&gt;&lt;p&gt;我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，&lt;strong&gt;Cmd Markdown&lt;/strong&gt; 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;整理知识，学习笔记&lt;/li&gt;
&lt;li&gt;发布日记，杂文，所见所想&lt;/li&gt;
&lt;li&gt;撰写发布技术文稿（代码支持）&lt;/li&gt;
&lt;li&gt;撰写发布学术论文（LaTeX 公式支持）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;  $$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$&lt;br&gt;  $$\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t$$&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.zybuluo.com/static/img/logo.png&quot; alt=&quot;cmd-markdown-logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="http://blog.midaug.win/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="test" scheme="http://blog.midaug.win/tags/test/"/>
    
  </entry>
  
</feed>
